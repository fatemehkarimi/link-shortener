// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: create_link.proto

package golang

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LinkShortener_CreateLink_FullMethodName    = "/org.link_shortener.v1.LinkShortener/CreateLink"
	LinkShortener_GetLinkByHash_FullMethodName = "/org.link_shortener.v1.LinkShortener/GetLinkByHash"
)

// LinkShortenerClient is the client API for LinkShortener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinkShortenerClient interface {
	CreateLink(ctx context.Context, in *RequestCreateLink, opts ...grpc.CallOption) (*ResponseCreateLink, error)
	GetLinkByHash(ctx context.Context, in *RequestGetLinkByHash, opts ...grpc.CallOption) (*ResponseGetLinkByHash, error)
}

type linkShortenerClient struct {
	cc grpc.ClientConnInterface
}

func NewLinkShortenerClient(cc grpc.ClientConnInterface) LinkShortenerClient {
	return &linkShortenerClient{cc}
}

func (c *linkShortenerClient) CreateLink(ctx context.Context, in *RequestCreateLink, opts ...grpc.CallOption) (*ResponseCreateLink, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseCreateLink)
	err := c.cc.Invoke(ctx, LinkShortener_CreateLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkShortenerClient) GetLinkByHash(ctx context.Context, in *RequestGetLinkByHash, opts ...grpc.CallOption) (*ResponseGetLinkByHash, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseGetLinkByHash)
	err := c.cc.Invoke(ctx, LinkShortener_GetLinkByHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinkShortenerServer is the server API for LinkShortener service.
// All implementations must embed UnimplementedLinkShortenerServer
// for forward compatibility.
type LinkShortenerServer interface {
	CreateLink(context.Context, *RequestCreateLink) (*ResponseCreateLink, error)
	GetLinkByHash(context.Context, *RequestGetLinkByHash) (*ResponseGetLinkByHash, error)
	mustEmbedUnimplementedLinkShortenerServer()
}

// UnimplementedLinkShortenerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLinkShortenerServer struct{}

func (UnimplementedLinkShortenerServer) CreateLink(context.Context, *RequestCreateLink) (*ResponseCreateLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLink not implemented")
}
func (UnimplementedLinkShortenerServer) GetLinkByHash(context.Context, *RequestGetLinkByHash) (*ResponseGetLinkByHash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLinkByHash not implemented")
}
func (UnimplementedLinkShortenerServer) mustEmbedUnimplementedLinkShortenerServer() {}
func (UnimplementedLinkShortenerServer) testEmbeddedByValue()                       {}

// UnsafeLinkShortenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinkShortenerServer will
// result in compilation errors.
type UnsafeLinkShortenerServer interface {
	mustEmbedUnimplementedLinkShortenerServer()
}

func RegisterLinkShortenerServer(s grpc.ServiceRegistrar, srv LinkShortenerServer) {
	// If the following call pancis, it indicates UnimplementedLinkShortenerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LinkShortener_ServiceDesc, srv)
}

func _LinkShortener_CreateLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCreateLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkShortenerServer).CreateLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkShortener_CreateLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkShortenerServer).CreateLink(ctx, req.(*RequestCreateLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkShortener_GetLinkByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetLinkByHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkShortenerServer).GetLinkByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LinkShortener_GetLinkByHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkShortenerServer).GetLinkByHash(ctx, req.(*RequestGetLinkByHash))
	}
	return interceptor(ctx, in, info, handler)
}

// LinkShortener_ServiceDesc is the grpc.ServiceDesc for LinkShortener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LinkShortener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.link_shortener.v1.LinkShortener",
	HandlerType: (*LinkShortenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLink",
			Handler:    _LinkShortener_CreateLink_Handler,
		},
		{
			MethodName: "GetLinkByHash",
			Handler:    _LinkShortener_GetLinkByHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "create_link.proto",
}
